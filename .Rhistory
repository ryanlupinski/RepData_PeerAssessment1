git master
cd datasciencecoursera/datasciencecoursera
git
library(datasets)
data(iris)
head(iris)
iris
apply(iris,1,mean)
summary(iris)
iris
iris$species
iris$Species
?iris
?which
iris_virginica = which(iris$Species == 'viriginica')
iris_virginica
iris_virginica = which(iris$Species == viriginica)
iris_virginica
iris_virginica = which(iris$Species == virginica)
iris_virginica
iris_virginica = which(iris$Species == 'virginica')
iris_virginica
iris_virginica = iris$Species == 'virginica'
iris_virginica
iris_virginica = iris$Species == virginica
iris_virginica
L = iris$Species == virginica
iris[L,]
L = iris$Species == virginica
iris[,L]
L = iris$Species == virginica
L
iris[,L]
L = iris$Species == virginica
class(L)
iris_virginica = iris$Species == virginica
iris_virginica
iris_virginica = iris$Species == virginica
iris[,iris_virginica]
iris_virginica = iris$Species == virginica
iris[iris_virginica,]
iris_virginica = iris$Species == virginica
iris[iris_virginica,]
class(iris)
iris_virginica = iris$Species == virginica
iris[iris_virginica,]
class(iris_virginica)
iris_virginica = iris$Species == virginica
iris[iris_virginica,]
apply(iris_virginica,2,mean)
iris_virginica = iris$Species == virginica
iris[iris_virginica,]
apply(iris_virginica,mean)
iris_virginica = iris$Species == virginica
iris[iris_virginica,]
apply(iris_virginica,1,mean)
iris_virginica = iris$Species == virginica
iris[iris_virginica,]
x = colMeans(iris_virginica)
x
iris_virginica = iris$Species == virginica
x = iris[iris_virginica,]
y = colMeans(x)
y
?colMeans
iris_virginica = iris$Species == virginica
x = iris[iris_virginica,]
class(x)
iris_virginica = iris$Species == virginica
x = iris[iris_virginica,]
colMeans(x)
?matrix
iris_virginica = iris$Species == virginica
x = iris[iris_virginica,]
y <- is.matrix(x)
class(y)
iris_virginica = iris$Species == virginica
x = iris[iris_virginica,]
y <- as.matrix(x)
class(y)
iris_virginica = iris$Species == virginica
x = iris[iris_virginica,]
x <- as.matrix(x)
class(x)
iris_virginica = iris$Species == virginica
x = iris[iris_virginica,]
x <- as.matrix(x)
colMeans(x)
iris_virginica = iris$Species == virginica
x = iris[iris_virginica,]
x <- as.numeric(x)
colMeans(x)
iris_virginica = iris$Species == virginica
x = iris[iris_virginica,]
x <- as.matrix(x)
class(x)
iris_virginica = iris$Species == virginica
x = iris[iris_virginica,]
x <- as.matrix(x)
apply(x,2,mean)
iris_virginica = iris$Species == virginica
x = iris[iris_virginica,]
x <- as.matrix(x)
apply(x,1,mean)
iris_virginica = iris$Species == virginica
x = iris[iris_virginica,]
x <- as.matrix(x)
apply(x,2,mean)
View(x)
View(x)
iris_virginica = iris$Species == virginica
x = iris[iris_virginica,]
y = x[c(1,)]
y <- as.matrix(y)
apply(x,2,mean)
iris_virginica = iris$Species == virginica
x = iris[iris_virginica,]
y = x[c(,4)]
y <- as.matrix(y)
apply(x,2,mean)
iris_virginica = iris$Species == virginica
x = iris[iris_virginica,]
y = x[,4]
y <- as.matrix(y)
apply(x,2,mean)
iris_virginica = iris$Species == virginica
x = iris[iris_virginica,]
y = x[,1]
y <- as.matrix(y)
apply(y,2,mean)
y
#iris_virginica = iris$Species == virginica
#x = iris[iris_virginica,]
#y = x[,1]
#y <- as.matrix(y)
#y
#apply(y,2,mean)
apply(iris[,1:4],1,mean)
#iris_virginica = iris$Species == virginica
#x = iris[iris_virginica,]
#y = x[,1]
#y <- as.matrix(y)
#y
#apply(y,2,mean)
apply(iris[,1:4],2,mean)
#iris_virginica = iris$Species == virginica
#x = iris[iris_virginica,]
#y = x[,1]
#y <- as.matrix(y)
#y
#apply(y,2,mean)
apply(iris_virginica[,1:4],2,mean)
#iris_virginica = iris$Species == virginica
#x = iris[iris_virginica,]
#y = x[,1]
#y <- as.matrix(y)
#y
#apply(y,2,mean)
apply(iris[,1:4],2,mean)
#iris_virginica = iris$Species == virginica
#x = iris[iris_virginica,]
#y = x[,1]
#y <- as.matrix(y)
#y
#apply(y,2,mean)
apply(iris,2,mean)
#iris_virginica = iris$Species == virginica
#x = iris[iris_virginica,]
#y = x[,1]
#y <- as.matrix(y)
#y
#apply(y,2,mean)
apply(iris[100:150,1],2,mean)
#iris_virginica = iris$Species == virginica
#x = iris[iris_virginica,]
#y = x[,1]
#y <- as.matrix(y)
#y
#apply(y,2,mean)
apply(iris[1,1:4],2,mean)
View(iris)
View(iris)
#iris_virginica = iris$Species == virginica
#x = iris[iris_virginica,]
#y = x[,1]
#y <- as.matrix(y)
#y
#apply(y,2,mean)
apply(iris[1:4,1:4],2,mean)
View(iris)
View(iris)
#iris_virginica = iris$Species == virginica
#x = iris[iris_virginica,]
#y = x[,1]
#y <- as.matrix(y)
#y
#apply(y,2,mean)
apply(iris[101:150,1:4],2,mean)
#iris_virginica = iris$Species == virginica
#x = iris[iris_virginica,]
#y = x[,1]
#y <- as.matrix(y)
#y
#apply(y,2,mean)
apply(iris[101:150,1],2,mean)
apply(iris[101:150,1:2],2,mean)
apply(iris[101:150,2],2,mean)
apply(iris[101:150,1:4],2,mean)
library(datasets)
data(mtcars)
head(mtcars)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
View(mtcars)
View(mtcars)
mean(mtcars$mpg,mtcars$cyl)
?NULL
makeCacheMatrix <- function(x = numeric()) {
# holds the cached value or NULL if nothing is cached
# initially nothing is cached so set it to NULL
cache <- NULL
# store a matrix
setMatrix <- function(newValue) {
x <<- newValue
# since the matrix is assigned a new value, flush the cache
cache <<- NULL
}
# returns the stored matrix
getMatrix <- function() {
x
}
# cache the given argument
cacheInverse <- function(solve) {
cache <<- solve
}
# get the cached value
getInverse <- function() {
cache
}
# return a list. Each named element of the list is a function
list(setMatrix = setMatrix, getMatrix = getMatrix, cacheInverse = cacheInverse, getInverse = getInverse)
}
# The following function calculates the inverse of a "special" matrix created with
# makeCacheMatrix
cacheSolve <- function(y, ...) {
# get the cached value
inverse <- y$getInverse()
# if a cached value exists return it
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
# otherwise get the matrix, caclulate the inverse and store it in
# the cache
data <- y$getMatrix()
inverse <- solve(data)
y$cacheInverse(inverse)
# return the inverse
inverse
}
z <-matrix(c(1,1,2,3,1,3,1,2,4),3,3)
solve(z)
z
solve(z)
solve(1)
solve(4,2)
solve(2,4)
solve(c(2,4),c(1,2))
solve(1:2,3:4)
solve(999)
?solve
in.na(1)
is.na(1)
is.na(NA)
is.na(NA,1,2,3,NA)
x <-c(1,2,NA,3,NA)
?matrix
x = matrix(1:4, nrow = 2, ncol = 2)
solve(x)
x
?traceback
cachematrix
solve(x)
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
swirl()
5+5
5+7
x <- 5 +7
x
y <- x -3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z -1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
c(1,2,3,4) + c(0,10,1000)
z*2+1000
my_div
bye()
x
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL()),user="genome",
ucscDb <- dbConnect(MySQL()),user="genome",
host="genome-mysql.cse.ucsc.edu")
results <- dbGetQuery(ucscDb, "show datavases;"); dbDisconnect(ucscDb);
# plot all 4 graphs in 1 window
png("plot4.png", width=480, height=480,)
par(mfrow=c(2,2))
plot(datetime, globalActivePower, type ="l", ylab ="Global Active Power (kilowawtts)", xlab="")
plot(datetime, voltage, type="l", ylab="Voltage")
plot(datetime,subMetering1, ylim =range(c(subMetering1,subMetering2)), type ="l", ylab="Energy Submetering", xlab="")
lines(datetime,subMetering2, ylim =range(c(subMetering1,subMetering2)), type ="l", col="red")
lines(datetime,subMetering3, ylim =range(c(subMetering1,subMetering2)), typ = "l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd=2, col=c("black", "red", "blue"))
plot(datetime, globalReactivePower, type="l", ylab="Global_Reactive_Power")
dev.off()
library(lattice)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?lattice
setwd("~/Twitter/RTwitterAPI/R")
setwd("~/datasciencecoursera/datasciencecoursera/Reproducible Research")
setwd("~/datasciencecoursera/datasciencecoursera/Reproducible Research/Assignment 1")
summary(activity.csv)
setwd("~/datasciencecoursera/datasciencecoursera/Reproducible Research/Assignment 1")
summary(activity.csv)
data <- read.csv(activity.csv, header = TRUE)
setwd("~/datasciencecoursera/datasciencecoursera/Reproducible Research/Assignment 1/RepData_PeerAssessment1")
data <- read.csv(activity.csv, header = TRUE)
setwd("~/datasciencecoursera/datasciencecoursera/Reproducible Research/Assignment 1/RepData_PeerAssessment1")
data <- read.csv(activity.csv, header = TRUE)
data <- read.csv(activity.csv, header = TRUE)
